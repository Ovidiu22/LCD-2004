
LCD-2004.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000070  00800100  00000b2e  00000ba2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b2e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000c12  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c70  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000cb0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001237  00000000  00000000  00000d38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008d1  00000000  00000000  00001f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000a62  00000000  00000000  00002840  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  000032a4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00007be1  00000000  00000000  000033e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008b9  00000000  00000000  0000afc5  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  0000b87e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00002f04  00000000  00000000  0000b8e6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	33 c0       	rjmp	.+102    	; 0x68 <__ctors_end>
   2:	00 00       	nop
   4:	44 c0       	rjmp	.+136    	; 0x8e <__bad_interrupt>
   6:	00 00       	nop
   8:	42 c0       	rjmp	.+132    	; 0x8e <__bad_interrupt>
   a:	00 00       	nop
   c:	40 c0       	rjmp	.+128    	; 0x8e <__bad_interrupt>
   e:	00 00       	nop
  10:	3e c0       	rjmp	.+124    	; 0x8e <__bad_interrupt>
  12:	00 00       	nop
  14:	3c c0       	rjmp	.+120    	; 0x8e <__bad_interrupt>
  16:	00 00       	nop
  18:	3a c0       	rjmp	.+116    	; 0x8e <__bad_interrupt>
  1a:	00 00       	nop
  1c:	38 c0       	rjmp	.+112    	; 0x8e <__bad_interrupt>
  1e:	00 00       	nop
  20:	36 c0       	rjmp	.+108    	; 0x8e <__bad_interrupt>
  22:	00 00       	nop
  24:	34 c0       	rjmp	.+104    	; 0x8e <__bad_interrupt>
  26:	00 00       	nop
  28:	32 c0       	rjmp	.+100    	; 0x8e <__bad_interrupt>
  2a:	00 00       	nop
  2c:	30 c0       	rjmp	.+96     	; 0x8e <__bad_interrupt>
  2e:	00 00       	nop
  30:	2e c0       	rjmp	.+92     	; 0x8e <__bad_interrupt>
  32:	00 00       	nop
  34:	2c c0       	rjmp	.+88     	; 0x8e <__bad_interrupt>
  36:	00 00       	nop
  38:	2a c0       	rjmp	.+84     	; 0x8e <__bad_interrupt>
  3a:	00 00       	nop
  3c:	28 c0       	rjmp	.+80     	; 0x8e <__bad_interrupt>
  3e:	00 00       	nop
  40:	26 c0       	rjmp	.+76     	; 0x8e <__bad_interrupt>
  42:	00 00       	nop
  44:	24 c0       	rjmp	.+72     	; 0x8e <__bad_interrupt>
  46:	00 00       	nop
  48:	22 c0       	rjmp	.+68     	; 0x8e <__bad_interrupt>
  4a:	00 00       	nop
  4c:	20 c0       	rjmp	.+64     	; 0x8e <__bad_interrupt>
  4e:	00 00       	nop
  50:	1e c0       	rjmp	.+60     	; 0x8e <__bad_interrupt>
  52:	00 00       	nop
  54:	1c c0       	rjmp	.+56     	; 0x8e <__bad_interrupt>
  56:	00 00       	nop
  58:	1a c0       	rjmp	.+52     	; 0x8e <__bad_interrupt>
  5a:	00 00       	nop
  5c:	18 c0       	rjmp	.+48     	; 0x8e <__bad_interrupt>
  5e:	00 00       	nop
  60:	16 c0       	rjmp	.+44     	; 0x8e <__bad_interrupt>
  62:	00 00       	nop
  64:	14 c0       	rjmp	.+40     	; 0x8e <__bad_interrupt>
	...

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e2       	ldi	r30, 0x2E	; 46
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a0 37       	cpi	r26, 0x70	; 112
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0d d2       	rcall	.+1050   	; 0x4a6 <main>
  8c:	4e c5       	rjmp	.+2716   	; 0xb2a <_exit>

0000008e <__bad_interrupt>:
  8e:	b8 cf       	rjmp	.-144    	; 0x0 <__vectors>

00000090 <configLCDPorts>:
Description:maps the data and control pins to the uC i/o ports
******************************************************************** */
void configLCDPorts(void)
{
	/* configure the microprocessor pins for the data lines */
	lcd_Data_DDR |= (1<<lcd_D7_bit) | (1<<lcd_D6_bit) | (1<<lcd_D5_bit) | (1<<lcd_D4_bit);
  90:	8a b1       	in	r24, 0x0a	; 10
  92:	80 6f       	ori	r24, 0xF0	; 240
  94:	8a b9       	out	0x0a, r24	; 10
	
	/* configure the microprocessor pins for the control lines */
	lcd_Ctlr_DDR |= (1<<lcd_RW_bit) | (1<<lcd_RS_bit) | (1<<lcd_E_bit);
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	8b 60       	ori	r24, 0x0B	; 11
  9a:	8a b9       	out	0x0a, r24	; 10
	
	/* Turn on LCD */
	DDRB |= (1<<lcd_ONOFF_bit);
  9c:	20 9a       	sbi	0x04, 0	; 4
  9e:	08 95       	ret

000000a0 <lcd_write_4>:
			RS is configured for the expected register
			E is low, RW is low
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
  a0:	cf 93       	push	r28
  a2:	df 93       	push	r29
  a4:	00 d0       	rcall	.+0      	; 0xa6 <lcd_write_4+0x6>
  a6:	00 d0       	rcall	.+0      	; 0xa8 <lcd_write_4+0x8>
  a8:	cd b7       	in	r28, 0x3d	; 61
  aa:	de b7       	in	r29, 0x3e	; 62
	uint8_t mask[4] = {0};
  ac:	19 82       	std	Y+1, r1	; 0x01
  ae:	1a 82       	std	Y+2, r1	; 0x02
  b0:	1b 82       	std	Y+3, r1	; 0x03
  b2:	1c 82       	std	Y+4, r1	; 0x04
  b4:	fe 01       	movw	r30, r28
  b6:	31 96       	adiw	r30, 0x01	; 1
  b8:	27 e0       	ldi	r18, 0x07	; 7
  ba:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
  bc:	90 e0       	ldi	r25, 0x00	; 0
		{
			mask[i] = 1;
  be:	61 e0       	ldi	r22, 0x01	; 1
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
  c0:	ac 01       	movw	r20, r24
  c2:	02 2e       	mov	r0, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <lcd_write_4+0x2a>
  c6:	55 95       	asr	r21
  c8:	47 95       	ror	r20
  ca:	0a 94       	dec	r0
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <lcd_write_4+0x26>
  ce:	40 fd       	sbrc	r20, 0
		{
			mask[i] = 1;
  d0:	60 83       	st	Z, r22
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	31 09       	sbc	r19, r1
  d6:	31 96       	adiw	r30, 0x01	; 1
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
  d8:	23 30       	cpi	r18, 0x03	; 3
  da:	31 05       	cpc	r19, r1
  dc:	89 f7       	brne	.-30     	; 0xc0 <lcd_write_4+0x20>
			mask[i] = 1;
		}
	}
	
	/* Clear bits in first step */
	lcd_Data_Port &= ~((1 << lcd_D7_bit) | (1 << lcd_D6_bit) | (1 << lcd_D5_bit) | (1 << lcd_D4_bit));
  de:	8b b1       	in	r24, 0x0b	; 11
  e0:	8f 70       	andi	r24, 0x0F	; 15
  e2:	8b b9       	out	0x0b, r24	; 11

	/* Set bits where necessary */
	lcd_Data_Port |= ((mask[0]) << lcd_D7_bit | (mask[1]) << lcd_D6_bit | (mask[2]) << lcd_D5_bit | (mask[3]) << lcd_D4_bit);
  e4:	2b b1       	in	r18, 0x0b	; 11
  e6:	49 81       	ldd	r20, Y+1	; 0x01
  e8:	30 e8       	ldi	r19, 0x80	; 128
  ea:	43 9f       	mul	r20, r19
  ec:	c0 01       	movw	r24, r0
  ee:	11 24       	eor	r1, r1
  f0:	9a 81       	ldd	r25, Y+2	; 0x02
  f2:	30 e4       	ldi	r19, 0x40	; 64
  f4:	93 9f       	mul	r25, r19
  f6:	a0 01       	movw	r20, r0
  f8:	11 24       	eor	r1, r1
  fa:	48 2b       	or	r20, r24
  fc:	42 2b       	or	r20, r18
  fe:	9b 81       	ldd	r25, Y+3	; 0x03
 100:	80 e2       	ldi	r24, 0x20	; 32
 102:	98 9f       	mul	r25, r24
 104:	90 01       	movw	r18, r0
 106:	11 24       	eor	r1, r1
 108:	24 2b       	or	r18, r20
 10a:	9c 81       	ldd	r25, Y+4	; 0x04
 10c:	30 e1       	ldi	r19, 0x10	; 16
 10e:	93 9f       	mul	r25, r19
 110:	c0 01       	movw	r24, r0
 112:	11 24       	eor	r1, r1
 114:	82 2b       	or	r24, r18
 116:	8b b9       	out	0x0b, r24	; 11

    /* Write the data */
    enable_E_Pin;                   // Enable pin high
 118:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 11a:	85 e0       	ldi	r24, 0x05	; 5
 11c:	8a 95       	dec	r24
 11e:	f1 f7       	brne	.-4      	; 0x11c <lcd_write_4+0x7c>
 120:	00 00       	nop
    _delay_us(1);                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    disable_E_Pin;                  // Enable pin low
 122:	5b 98       	cbi	0x0b, 3	; 11
 124:	35 e0       	ldi	r19, 0x05	; 5
 126:	3a 95       	dec	r19
 128:	f1 f7       	brne	.-4      	; 0x126 <lcd_write_4+0x86>
 12a:	00 00       	nop
    _delay_us(1);                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
 12c:	0f 90       	pop	r0
 12e:	0f 90       	pop	r0
 130:	0f 90       	pop	r0
 132:	0f 90       	pop	r0
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	08 95       	ret

0000013a <lcd_write_character_4f>:
Outputs:	none
Description:sends a byte to the LCD data register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_character_4f(uint8_t theChar)
{
 13a:	cf 93       	push	r28
 13c:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
 13e:	58 98       	cbi	0x0b, 0	; 11
    set_RS_HIGH_Data;					// Select the Data Register (RS high)
 140:	59 9a       	sbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
 142:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theChar);				// Write the upper 4-bits of the data
 144:	ad df       	rcall	.-166    	; 0xa0 <lcd_write_4>
    lcd_write_4(theChar << 4);			// Write the lower 4-bits of the data
 146:	8c 2f       	mov	r24, r28
 148:	82 95       	swap	r24
 14a:	80 7f       	andi	r24, 0xF0	; 240
 14c:	a9 df       	rcall	.-174    	; 0xa0 <lcd_write_4>
}
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <lcd_write_instruction_4f>:
Outputs:	none
Description:sends a byte to the LCD instruction register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_instruction_4f(uint8_t theInstruction)
{
 152:	cf 93       	push	r28
 154:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
 156:	58 98       	cbi	0x0b, 0	; 11
    set_RS_LOW_Instr;					// Select the Data Register (RS high)
 158:	59 98       	cbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
 15a:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theInstruction);		// Write the upper 4-bits of the data
 15c:	a1 df       	rcall	.-190    	; 0xa0 <lcd_write_4>
    lcd_write_4(theInstruction << 4);	// Write the lower 4-bits of the data
 15e:	8c 2f       	mov	r24, r28
 160:	82 95       	swap	r24
 162:	80 7f       	andi	r24, 0xF0	; 240
 164:	9d df       	rcall	.-198    	; 0xa0 <lcd_write_4>
}
 166:	cf 91       	pop	r28
 168:	08 95       	ret

0000016a <lcd_check_BF_4>:
void lcd_check_BF_4(void)
{
	
    uint8_t busy_flag_copy;             // busy flag 'mirror'

    set_D7_input;						// set D7 data direction to input
 16a:	57 98       	cbi	0x0a, 7	; 10
    set_RS_LOW_Instr;					// select the Instruction Register (RS low)
 16c:	59 98       	cbi	0x0b, 1	; 11
    set_RW_HIGH_read;					// read from LCD module (RW high)
 16e:	58 9a       	sbi	0x0b, 0	; 11

    do
    {
        busy_flag_copy = 0;                         // initialize busy flag 'mirror'
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
 170:	5b 9a       	sbi	0x0b, 3	; 11
 172:	85 e0       	ldi	r24, 0x05	; 5
 174:	8a 95       	dec	r24
 176:	f1 f7       	brne	.-4      	; 0x174 <lcd_check_BF_4+0xa>
 178:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)

        busy_flag_copy |= (lcd_D7_pin & (1<<lcd_D7_bit));  // get actual busy flag status
 17a:	89 b1       	in	r24, 0x09	; 9

        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
 17c:	5b 98       	cbi	0x0b, 3	; 11
 17e:	95 e0       	ldi	r25, 0x05	; 5
 180:	9a 95       	dec	r25
 182:	f1 f7       	brne	.-4      	; 0x180 <lcd_check_BF_4+0x16>
 184:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time' (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )
        
// read and discard alternate nibbles (D3 information)
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
 186:	5b 9a       	sbi	0x0b, 3	; 11
 188:	95 e0       	ldi	r25, 0x05	; 5
 18a:	9a 95       	dec	r25
 18c:	f1 f7       	brne	.-4      	; 0x18a <lcd_check_BF_4+0x20>
 18e:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)
        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
 190:	5b 98       	cbi	0x0b, 3	; 11
 192:	95 e0       	ldi	r25, 0x05	; 5
 194:	9a 95       	dec	r25
 196:	f1 f7       	brne	.-4      	; 0x194 <lcd_check_BF_4+0x2a>
 198:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )

    } while (busy_flag_copy);                       // check again if busy flag was high
 19a:	88 23       	and	r24, r24
 19c:	4c f3       	brlt	.-46     	; 0x170 <lcd_check_BF_4+0x6>

// arrive here if busy flag is clear -  clean up and return 
    set_RW_LOW_write;               // write to LCD module (RW low)
 19e:	58 98       	cbi	0x0b, 0	; 11
    set_D7_output;                  // reset D7 data direction to output	
 1a0:	57 9a       	sbi	0x0a, 7	; 10
 1a2:	08 95       	ret

000001a4 <lcd_init_4f>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1a4:	2f ef       	ldi	r18, 0xFF	; 255
 1a6:	81 ee       	ldi	r24, 0xE1	; 225
 1a8:	94 e0       	ldi	r25, 0x04	; 4
 1aa:	21 50       	subi	r18, 0x01	; 1
 1ac:	80 40       	sbci	r24, 0x00	; 0
 1ae:	90 40       	sbci	r25, 0x00	; 0
 1b0:	e1 f7       	brne	.-8      	; 0x1aa <lcd_init_4f+0x6>
 1b2:	00 c0       	rjmp	.+0      	; 0x1b4 <lcd_init_4f+0x10>
 1b4:	00 00       	nop
	 this instruction can be sent on just the four available data lines and it will be interpreted
	 properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the
	 control lines have previously been configured properly. */

	/* Set up the RS, E, and RW lines for the 'lcd_write_4' function. */
	set_RS_LOW_Instr;	// Select the Instruction Register (RS low)
 1b6:	59 98       	cbi	0x0b, 1	; 11
	disable_E_Pin;		// Make sure E is initially low
 1b8:	5b 98       	cbi	0x0b, 3	; 11
	set_RW_LOW_write;	// write to LCD module (RW low)
 1ba:	58 98       	cbi	0x0b, 0	; 11

	/* Reset the LCD controller */
	lcd_write_4(lcd_FunctionReset);		// First part of reset sequence
 1bc:	80 e3       	ldi	r24, 0x30	; 48
 1be:	70 df       	rcall	.-288    	; 0xa0 <lcd_write_4>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1c0:	25 e3       	ldi	r18, 0x35	; 53
 1c2:	2a 95       	dec	r18
 1c4:	f1 f7       	brne	.-4      	; 0x1c2 <lcd_init_4f+0x1e>
 1c6:	00 00       	nop
	_delay_us(10);                      // Delay of 10 us
	
	lcd_write_4(lcd_FunctionReset);		// Second part of reset sequence
 1c8:	80 e3       	ldi	r24, 0x30	; 48
 1ca:	6a df       	rcall	.-300    	; 0xa0 <lcd_write_4>
 1cc:	8f e1       	ldi	r24, 0x1F	; 31
 1ce:	93 e0       	ldi	r25, 0x03	; 3
 1d0:	01 97       	sbiw	r24, 0x01	; 1
 1d2:	f1 f7       	brne	.-4      	; 0x1d0 <lcd_init_4f+0x2c>
 1d4:	00 c0       	rjmp	.+0      	; 0x1d6 <lcd_init_4f+0x32>
	_delay_us(200);						// Delay of 200 us

	lcd_write_4(lcd_FunctionReset);		// Third part of reset sequence
 1d6:	00 00       	nop
 1d8:	80 e3       	ldi	r24, 0x30	; 48
 1da:	62 df       	rcall	.-316    	; 0xa0 <lcd_write_4>
 1dc:	8f e3       	ldi	r24, 0x3F	; 63
 1de:	91 e0       	ldi	r25, 0x01	; 1
 1e0:	01 97       	sbiw	r24, 0x01	; 1
 1e2:	f1 f7       	brne	.-4      	; 0x1e0 <lcd_init_4f+0x3c>
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <lcd_init_4f+0x42>
	/* Preliminary Function Set instruction - used only to set the 4-bit mode.
	 The number of lines or the font cannot be set at this time since the controller is still in the
	 8-bit mode, but the data transfer mode can be changed since this parameter is determined by one
	 of the upper four bits of the instruction. */
	
	lcd_write_4(lcd_FunctionSet4bit);	// Set 4-bit mode
 1e6:	00 00       	nop
 1e8:	88 e2       	ldi	r24, 0x28	; 40
	// From this point on the busy flag is available

	// Function Set instruction
	lcd_check_BF_4();    // Makes sure LCD controller is ready
 1ea:	5a df       	rcall	.-332    	; 0xa0 <lcd_write_4>
                         
	lcd_write_instruction_4f(lcd_FunctionSet4bit);  // Set mode, lines, and font
 1ec:	be df       	rcall	.-132    	; 0x16a <lcd_check_BF_4>
 1ee:	88 e2       	ldi	r24, 0x28	; 40
	/*The next three instructions are specified in the data sheet as part of the initialization routine,
	  so it is a good idea (but probably not necessary) to do them just as specified and then redo them
	  later if the application requires a different configuration.*/

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
 1f0:	b0 df       	rcall	.-160    	; 0x152 <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOff);       // Turn display OFF
 1f2:	bb df       	rcall	.-138    	; 0x16a <lcd_check_BF_4>

	/* Clear Display instruction */
	lcd_check_BF_4();
 1f4:	88 e0       	ldi	r24, 0x08	; 8
	lcd_write_instruction_4f(lcd_Clear);            // Clear display RAM
 1f6:	ad df       	rcall	.-166    	; 0x152 <lcd_write_instruction_4f>
 1f8:	b8 df       	rcall	.-144    	; 0x16a <lcd_check_BF_4>
 1fa:	81 e0       	ldi	r24, 0x01	; 1
	
	/* Entry Mode Set instruction */
	lcd_check_BF_4();
 1fc:	aa df       	rcall	.-172    	; 0x152 <lcd_write_instruction_4f>
 1fe:	b5 df       	rcall	.-150    	; 0x16a <lcd_check_BF_4>
	lcd_write_instruction_4f(lcd_EntryMode);        // Set desired shift characteristics
 200:	86 e0       	ldi	r24, 0x06	; 6
 202:	a7 df       	rcall	.-178    	; 0x152 <lcd_write_instruction_4f>
 204:	b2 df       	rcall	.-156    	; 0x16a <lcd_check_BF_4>
	/*This is the end of the LCD controller initialization as specified in the data sheet, but the display
	  has been left in the OFF condition.  This is a good time to turn the display back ON. */

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
 206:	8c e0       	ldi	r24, 0x0C	; 12
 208:	a4 cf       	rjmp	.-184    	; 0x152 <lcd_write_instruction_4f>
	lcd_write_instruction_4f(lcd_DisplayOn);        // turn the display ON
 20a:	08 95       	ret

0000020c <initLCD>:
 20c:	41 df       	rcall	.-382    	; 0x90 <configLCDPorts>
 20e:	ca df       	rcall	.-108    	; 0x1a4 <lcd_init_4f>
 210:	2f ef       	ldi	r18, 0xFF	; 255
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 212:	81 ee       	ldi	r24, 0xE1	; 225
 214:	94 e0       	ldi	r25, 0x04	; 4
 216:	21 50       	subi	r18, 0x01	; 1
 218:	80 40       	sbci	r24, 0x00	; 0
 21a:	90 40       	sbci	r25, 0x00	; 0
 21c:	e1 f7       	brne	.-8      	; 0x216 <initLCD+0xa>
 21e:	00 c0       	rjmp	.+0      	; 0x220 <initLCD+0x14>
 220:	00 00       	nop
 222:	08 95       	ret

00000224 <lcd_write_string_4f>:
 224:	0f 93       	push	r16
Inputs:		string to be displayed (stringData)
Outputs:	none
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
 226:	1f 93       	push	r17
 228:	cf 93       	push	r28
 22a:	df 93       	push	r29
 22c:	00 d0       	rcall	.+0      	; 0x22e <lcd_write_string_4f+0xa>
 22e:	cd b7       	in	r28, 0x3d	; 61
 230:	de b7       	in	r29, 0x3e	; 62
 232:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // Character counter
 234:	1a 82       	std	Y+2, r1	; 0x02
 236:	19 82       	std	Y+1, r1	; 0x01
    while (stringData[i] != 0)
 238:	e9 81       	ldd	r30, Y+1	; 0x01
 23a:	fa 81       	ldd	r31, Y+2	; 0x02
 23c:	e8 0f       	add	r30, r24
 23e:	f9 1f       	adc	r31, r25
 240:	80 81       	ld	r24, Z
 242:	88 23       	and	r24, r24
 244:	99 f0       	breq	.+38     	; 0x26c <lcd_write_string_4f+0x48>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
 246:	91 df       	rcall	.-222    	; 0x16a <lcd_check_BF_4>
        lcd_write_character_4f(stringData[i]);
 248:	e9 81       	ldd	r30, Y+1	; 0x01
 24a:	fa 81       	ldd	r31, Y+2	; 0x02
 24c:	e0 0f       	add	r30, r16
 24e:	f1 1f       	adc	r31, r17
 250:	80 81       	ld	r24, Z
 252:	73 df       	rcall	.-282    	; 0x13a <lcd_write_character_4f>
        i++;
 254:	89 81       	ldd	r24, Y+1	; 0x01
 256:	9a 81       	ldd	r25, Y+2	; 0x02
 258:	01 96       	adiw	r24, 0x01	; 1
 25a:	9a 83       	std	Y+2, r25	; 0x02
 25c:	89 83       	std	Y+1, r24	; 0x01
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
    volatile int i = 0;                             // Character counter
    while (stringData[i] != 0)
 25e:	e9 81       	ldd	r30, Y+1	; 0x01
 260:	fa 81       	ldd	r31, Y+2	; 0x02
 262:	e0 0f       	add	r30, r16
 264:	f1 1f       	adc	r31, r17
 266:	80 81       	ld	r24, Z
 268:	81 11       	cpse	r24, r1
 26a:	ed cf       	rjmp	.-38     	; 0x246 <lcd_write_string_4f+0x22>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
        lcd_write_character_4f(stringData[i]);
        i++;
    }
}
 26c:	0f 90       	pop	r0
 26e:	0f 90       	pop	r0
 270:	df 91       	pop	r29
 272:	cf 91       	pop	r28
 274:	1f 91       	pop	r17
 276:	0f 91       	pop	r16
 278:	08 95       	ret

0000027a <updateLCDScreen>:
Inputs:		two pointers to a uint8 type data and 2 values, one for each row
Outputs:	none
Description:commands writing on LCD line by line 
******************************************************************** */
void updateLCDScreen(uint8_t row, char * s1, uint8_t data, char * s2)
{
 27a:	df 92       	push	r13
 27c:	ef 92       	push	r14
 27e:	ff 92       	push	r15
 280:	0f 93       	push	r16
 282:	1f 93       	push	r17
 284:	cf 93       	push	r28
 286:	df 93       	push	r29
 288:	cd b7       	in	r28, 0x3d	; 61
 28a:	de b7       	in	r29, 0x3e	; 62
 28c:	af 97       	sbiw	r28, 0x2f	; 47
 28e:	0f b6       	in	r0, 0x3f	; 63
 290:	f8 94       	cli
 292:	de bf       	out	0x3e, r29	; 62
 294:	0f be       	out	0x3f, r0	; 63
 296:	cd bf       	out	0x3d, r28	; 61
 298:	18 2f       	mov	r17, r24
 29a:	d6 2e       	mov	r13, r22
 29c:	07 2f       	mov	r16, r23
 29e:	84 2f       	mov	r24, r20
 2a0:	79 01       	movw	r14, r18
	/* convert data to string [buf] */
	char data2char[4] = "   ";
 2a2:	20 e2       	ldi	r18, 0x20	; 32
 2a4:	30 e2       	ldi	r19, 0x20	; 32
 2a6:	3a 83       	std	Y+2, r19	; 0x02
 2a8:	29 83       	std	Y+1, r18	; 0x01
 2aa:	20 e2       	ldi	r18, 0x20	; 32
 2ac:	30 e0       	ldi	r19, 0x00	; 0
 2ae:	3c 83       	std	Y+4, r19	; 0x04
 2b0:	2b 83       	std	Y+3, r18	; 0x03
	char charRow[21];
	char emptyString[] = "                     ";	//21 empty spaces
 2b2:	96 e1       	ldi	r25, 0x16	; 22
 2b4:	e4 e1       	ldi	r30, 0x14	; 20
 2b6:	f1 e0       	ldi	r31, 0x01	; 1
 2b8:	de 01       	movw	r26, r28
 2ba:	5a 96       	adiw	r26, 0x1a	; 26
 2bc:	01 90       	ld	r0, Z+
 2be:	0d 92       	st	X+, r0
 2c0:	9a 95       	dec	r25
 2c2:	e1 f7       	brne	.-8      	; 0x2bc <updateLCDScreen+0x42>
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
 2c4:	4f 3f       	cpi	r20, 0xFF	; 255
 2c6:	31 f0       	breq	.+12     	; 0x2d4 <updateLCDScreen+0x5a>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2c8:	4a e0       	ldi	r20, 0x0A	; 10
 2ca:	be 01       	movw	r22, r28
 2cc:	6f 5f       	subi	r22, 0xFF	; 255
 2ce:	7f 4f       	sbci	r23, 0xFF	; 255
 2d0:	90 e0       	ldi	r25, 0x00	; 0
 2d2:	12 d1       	rcall	.+548    	; 0x4f8 <__itoa_ncheck>
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
 2d4:	60 e0       	ldi	r22, 0x00	; 0
 2d6:	71 e0       	ldi	r23, 0x01	; 1
 2d8:	8d 2d       	mov	r24, r13
 2da:	90 2f       	mov	r25, r16
 2dc:	04 d1       	rcall	.+520    	; 0x4e6 <strcmp>
 2de:	89 2b       	or	r24, r25
 2e0:	09 f4       	brne	.+2      	; 0x2e4 <updateLCDScreen+0x6a>
 2e2:	ac c0       	rjmp	.+344    	; 0x43c <__LOCK_REGION_LENGTH__+0x3c>
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
 2e4:	60 e0       	ldi	r22, 0x00	; 0
 2e6:	71 e0       	ldi	r23, 0x01	; 1
 2e8:	c7 01       	movw	r24, r14
 2ea:	fd d0       	rcall	.+506    	; 0x4e6 <strcmp>
 2ec:	89 2b       	or	r24, r25
 2ee:	31 f4       	brne	.+12     	; 0x2fc <updateLCDScreen+0x82>
 2f0:	0f 2e       	mov	r0, r31
 2f2:	f9 e2       	ldi	r31, 0x29	; 41
 2f4:	ef 2e       	mov	r14, r31
 2f6:	f1 e0       	ldi	r31, 0x01	; 1
 2f8:	ff 2e       	mov	r15, r31
 2fa:	f0 2d       	mov	r31, r0
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
 2fc:	ce 01       	movw	r24, r28
 2fe:	4a 96       	adiw	r24, 0x1a	; 26
 300:	9f 93       	push	r25
 302:	8f 93       	push	r24
 304:	ff 92       	push	r15
 306:	ef 92       	push	r14
 308:	49 97       	sbiw	r24, 0x19	; 25
 30a:	9f 93       	push	r25
 30c:	8f 93       	push	r24
 30e:	0f 93       	push	r16
 310:	df 92       	push	r13
 312:	85 e0       	ldi	r24, 0x05	; 5
 314:	91 e0       	ldi	r25, 0x01	; 1
 316:	9f 93       	push	r25
 318:	8f 93       	push	r24
 31a:	1f 92       	push	r1
 31c:	85 e1       	ldi	r24, 0x15	; 21
 31e:	8f 93       	push	r24
 320:	ce 01       	movw	r24, r28
 322:	05 96       	adiw	r24, 0x05	; 5
 324:	9f 93       	push	r25
 326:	8f 93       	push	r24
 328:	0a d1       	rcall	.+532    	; 0x53e <snprintf>
	if (strcmp(s1, "CLEAR") == 0 ) { snprintf( charRow, sizeof charRow, "%s", emptyString ); };
 32a:	6e e0       	ldi	r22, 0x0E	; 14
 32c:	71 e0       	ldi	r23, 0x01	; 1
 32e:	8d 2d       	mov	r24, r13
 330:	90 2f       	mov	r25, r16
 332:	d9 d0       	rcall	.+434    	; 0x4e6 <strcmp>
 334:	0f b6       	in	r0, 0x3f	; 63
 336:	f8 94       	cli
 338:	de bf       	out	0x3e, r29	; 62
 33a:	0f be       	out	0x3f, r0	; 63
 33c:	cd bf       	out	0x3d, r28	; 61
 33e:	89 2b       	or	r24, r25
 340:	a9 f4       	brne	.+42     	; 0x36c <updateLCDScreen+0xf2>
 342:	ce 01       	movw	r24, r28
 344:	4a 96       	adiw	r24, 0x1a	; 26
 346:	9f 93       	push	r25
 348:	8f 93       	push	r24
 34a:	8b e0       	ldi	r24, 0x0B	; 11
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	9f 93       	push	r25
 350:	8f 93       	push	r24
 352:	1f 92       	push	r1
 354:	85 e1       	ldi	r24, 0x15	; 21
 356:	8f 93       	push	r24
 358:	ce 01       	movw	r24, r28
 35a:	05 96       	adiw	r24, 0x05	; 5
 35c:	9f 93       	push	r25
 35e:	8f 93       	push	r24
 360:	ee d0       	rcall	.+476    	; 0x53e <snprintf>
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	f8 94       	cli
 366:	de bf       	out	0x3e, r29	; 62
 368:	0f be       	out	0x3f, r0	; 63
 36a:	cd bf       	out	0x3d, r28	; 61
		
	switch(row) {
 36c:	12 30       	cpi	r17, 0x02	; 2
 36e:	a9 f0       	breq	.+42     	; 0x39a <updateLCDScreen+0x120>
 370:	18 f4       	brcc	.+6      	; 0x378 <updateLCDScreen+0xfe>
 372:	11 30       	cpi	r17, 0x01	; 1
 374:	31 f0       	breq	.+12     	; 0x382 <updateLCDScreen+0x108>
 376:	34 c0       	rjmp	.+104    	; 0x3e0 <updateLCDScreen+0x166>
 378:	13 30       	cpi	r17, 0x03	; 3
 37a:	d9 f0       	breq	.+54     	; 0x3b2 <updateLCDScreen+0x138>
 37c:	14 30       	cpi	r17, 0x04	; 4
 37e:	29 f1       	breq	.+74     	; 0x3ca <updateLCDScreen+0x150>
		case 1: /* ======= Line 1 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineOne); _delay_ms(50);
 380:	2f c0       	rjmp	.+94     	; 0x3e0 <updateLCDScreen+0x166>
 382:	80 e8       	ldi	r24, 0x80	; 128
 384:	e6 de       	rcall	.-564    	; 0x152 <lcd_write_instruction_4f>
 386:	9f ef       	ldi	r25, 0xFF	; 255
 388:	20 e7       	ldi	r18, 0x70	; 112
 38a:	32 e0       	ldi	r19, 0x02	; 2
 38c:	91 50       	subi	r25, 0x01	; 1
 38e:	20 40       	sbci	r18, 0x00	; 0
 390:	30 40       	sbci	r19, 0x00	; 0
 392:	e1 f7       	brne	.-8      	; 0x38c <updateLCDScreen+0x112>
 394:	00 c0       	rjmp	.+0      	; 0x396 <updateLCDScreen+0x11c>
 396:	00 00       	nop
			break;
		case 2: /* ======= Line 2 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineTwo); _delay_ms(50);
 398:	23 c0       	rjmp	.+70     	; 0x3e0 <updateLCDScreen+0x166>
 39a:	80 ec       	ldi	r24, 0xC0	; 192
 39c:	da de       	rcall	.-588    	; 0x152 <lcd_write_instruction_4f>
 39e:	8f ef       	ldi	r24, 0xFF	; 255
 3a0:	90 e7       	ldi	r25, 0x70	; 112
 3a2:	22 e0       	ldi	r18, 0x02	; 2
 3a4:	81 50       	subi	r24, 0x01	; 1
 3a6:	90 40       	sbci	r25, 0x00	; 0
 3a8:	20 40       	sbci	r18, 0x00	; 0
 3aa:	e1 f7       	brne	.-8      	; 0x3a4 <updateLCDScreen+0x12a>
 3ac:	00 c0       	rjmp	.+0      	; 0x3ae <updateLCDScreen+0x134>
 3ae:	00 00       	nop
			break;
		case 3: /* ======= Line 3 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineThree); _delay_ms(50);
 3b0:	17 c0       	rjmp	.+46     	; 0x3e0 <updateLCDScreen+0x166>
 3b2:	84 e9       	ldi	r24, 0x94	; 148
 3b4:	ce de       	rcall	.-612    	; 0x152 <lcd_write_instruction_4f>
 3b6:	3f ef       	ldi	r19, 0xFF	; 255
 3b8:	80 e7       	ldi	r24, 0x70	; 112
 3ba:	92 e0       	ldi	r25, 0x02	; 2
 3bc:	31 50       	subi	r19, 0x01	; 1
 3be:	80 40       	sbci	r24, 0x00	; 0
 3c0:	90 40       	sbci	r25, 0x00	; 0
 3c2:	e1 f7       	brne	.-8      	; 0x3bc <updateLCDScreen+0x142>
 3c4:	00 c0       	rjmp	.+0      	; 0x3c6 <updateLCDScreen+0x14c>
 3c6:	00 00       	nop
			break;
		case 4: /* ======= Line 4 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_lineFour); _delay_ms(50);
 3c8:	0b c0       	rjmp	.+22     	; 0x3e0 <updateLCDScreen+0x166>
 3ca:	84 ed       	ldi	r24, 0xD4	; 212
 3cc:	c2 de       	rcall	.-636    	; 0x152 <lcd_write_instruction_4f>
 3ce:	2f ef       	ldi	r18, 0xFF	; 255
 3d0:	30 e7       	ldi	r19, 0x70	; 112
 3d2:	82 e0       	ldi	r24, 0x02	; 2
 3d4:	21 50       	subi	r18, 0x01	; 1
 3d6:	30 40       	sbci	r19, 0x00	; 0
 3d8:	80 40       	sbci	r24, 0x00	; 0
 3da:	e1 f7       	brne	.-8      	; 0x3d4 <updateLCDScreen+0x15a>
 3dc:	00 c0       	rjmp	.+0      	; 0x3de <updateLCDScreen+0x164>
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow); _delay_ms(50);
 3de:	00 00       	nop
 3e0:	ce 01       	movw	r24, r28
 3e2:	05 96       	adiw	r24, 0x05	; 5
 3e4:	1f df       	rcall	.-450    	; 0x224 <lcd_write_string_4f>
 3e6:	9f ef       	ldi	r25, 0xFF	; 255
 3e8:	20 e7       	ldi	r18, 0x70	; 112
 3ea:	32 e0       	ldi	r19, 0x02	; 2
 3ec:	91 50       	subi	r25, 0x01	; 1
 3ee:	20 40       	sbci	r18, 0x00	; 0
 3f0:	30 40       	sbci	r19, 0x00	; 0
 3f2:	e1 f7       	brne	.-8      	; 0x3ec <updateLCDScreen+0x172>
 3f4:	00 c0       	rjmp	.+0      	; 0x3f6 <updateLCDScreen+0x17c>
 3f6:	00 00       	nop
}
 3f8:	46 c0       	rjmp	.+140    	; 0x486 <__LOCK_REGION_LENGTH__+0x86>
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
 3fa:	ce 01       	movw	r24, r28
 3fc:	4a 96       	adiw	r24, 0x1a	; 26
 3fe:	9f 93       	push	r25
 400:	8f 93       	push	r24
 402:	89 e2       	ldi	r24, 0x29	; 41
 404:	91 e0       	ldi	r25, 0x01	; 1
 406:	9f 93       	push	r25
 408:	8f 93       	push	r24
 40a:	9e 01       	movw	r18, r28
 40c:	2f 5f       	subi	r18, 0xFF	; 255
 40e:	3f 4f       	sbci	r19, 0xFF	; 255
 410:	3f 93       	push	r19
 412:	2f 93       	push	r18
 414:	9f 93       	push	r25
 416:	8f 93       	push	r24
 418:	85 e0       	ldi	r24, 0x05	; 5
 41a:	91 e0       	ldi	r25, 0x01	; 1
 41c:	9f 93       	push	r25
 41e:	8f 93       	push	r24
 420:	1f 92       	push	r1
 422:	85 e1       	ldi	r24, 0x15	; 21
 424:	8f 93       	push	r24
 426:	ce 01       	movw	r24, r28
 428:	05 96       	adiw	r24, 0x05	; 5
 42a:	9f 93       	push	r25
 42c:	8f 93       	push	r24
 42e:	87 d0       	rcall	.+270    	; 0x53e <snprintf>
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	f8 94       	cli
 434:	de bf       	out	0x3e, r29	; 62
 436:	0f be       	out	0x3f, r0	; 63
 438:	cd bf       	out	0x3d, r28	; 61
	char charRow[21];
	char emptyString[] = "                     ";	//21 empty spaces
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
 43a:	98 cf       	rjmp	.-208    	; 0x36c <updateLCDScreen+0xf2>
 43c:	60 e0       	ldi	r22, 0x00	; 0
 43e:	71 e0       	ldi	r23, 0x01	; 1
 440:	c7 01       	movw	r24, r14
 442:	51 d0       	rcall	.+162    	; 0x4e6 <strcmp>
 444:	89 2b       	or	r24, r25
 446:	c9 f2       	breq	.-78     	; 0x3fa <updateLCDScreen+0x180>
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
 448:	ce 01       	movw	r24, r28
 44a:	4a 96       	adiw	r24, 0x1a	; 26
 44c:	9f 93       	push	r25
 44e:	8f 93       	push	r24
 450:	ff 92       	push	r15
 452:	ef 92       	push	r14
 454:	49 97       	sbiw	r24, 0x19	; 25
 456:	9f 93       	push	r25
 458:	8f 93       	push	r24
 45a:	89 e2       	ldi	r24, 0x29	; 41
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	9f 93       	push	r25
 460:	8f 93       	push	r24
 462:	85 e0       	ldi	r24, 0x05	; 5
 464:	91 e0       	ldi	r25, 0x01	; 1
 466:	9f 93       	push	r25
 468:	8f 93       	push	r24
 46a:	1f 92       	push	r1
 46c:	85 e1       	ldi	r24, 0x15	; 21
 46e:	8f 93       	push	r24
 470:	ce 01       	movw	r24, r28
 472:	05 96       	adiw	r24, 0x05	; 5
 474:	9f 93       	push	r25
 476:	8f 93       	push	r24
 478:	62 d0       	rcall	.+196    	; 0x53e <snprintf>
 47a:	0f b6       	in	r0, 0x3f	; 63
 47c:	f8 94       	cli
 47e:	de bf       	out	0x3e, r29	; 62
 480:	0f be       	out	0x3f, r0	; 63
 482:	cd bf       	out	0x3d, r28	; 61
 484:	73 cf       	rjmp	.-282    	; 0x36c <updateLCDScreen+0xf2>
		case 4: /* ======= Line 4 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_lineFour); _delay_ms(50);
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow); _delay_ms(50);
}
 486:	af 96       	adiw	r28, 0x2f	; 47
 488:	0f b6       	in	r0, 0x3f	; 63
 48a:	f8 94       	cli
 48c:	de bf       	out	0x3e, r29	; 62
 48e:	0f be       	out	0x3f, r0	; 63
 490:	cd bf       	out	0x3d, r28	; 61
 492:	df 91       	pop	r29
 494:	cf 91       	pop	r28
 496:	1f 91       	pop	r17
 498:	0f 91       	pop	r16
 49a:	ff 90       	pop	r15
 49c:	ef 90       	pop	r14
 49e:	df 90       	pop	r13
 4a0:	08 95       	ret

000004a2 <displayLCD_main>:
Description:displays on the screen the data passed to the input
******************************************************************** */
void displayLCD_main(uint8_t drow, char * s1, uint8_t d1, char * s2)
{
	/* Write text on the LCD */
	updateLCDScreen(drow, s1, d1, s2);
 4a2:	eb ce       	rjmp	.-554    	; 0x27a <updateLCDScreen>
 4a4:	08 95       	ret

000004a6 <main>:
int main(void)
{
	uint8_t temperature = 25; //C
	uint8_t rel_humidity = 65; //%
	
	initLCD();
 4a6:	b2 de       	rcall	.-668    	; 0x20c <initLCD>
//displayLCD_main(row on LCD, "Text 1", number, "Text 2");		
	displayLCD_main(1, "Hello there!Hithere!", NONE, "NONE");
 4a8:	20 e0       	ldi	r18, 0x00	; 0
 4aa:	31 e0       	ldi	r19, 0x01	; 1
 4ac:	4f ef       	ldi	r20, 0xFF	; 255
 4ae:	6a e2       	ldi	r22, 0x2A	; 42
 4b0:	71 e0       	ldi	r23, 0x01	; 1
 4b2:	81 e0       	ldi	r24, 0x01	; 1
 4b4:	f6 df       	rcall	.-20     	; 0x4a2 <displayLCD_main>
	displayLCD_main(2, "Temperature: ", temperature, " C");
 4b6:	2f e3       	ldi	r18, 0x3F	; 63
 4b8:	31 e0       	ldi	r19, 0x01	; 1
 4ba:	49 e1       	ldi	r20, 0x19	; 25
 4bc:	62 e4       	ldi	r22, 0x42	; 66
 4be:	71 e0       	ldi	r23, 0x01	; 1
 4c0:	82 e0       	ldi	r24, 0x02	; 2
 4c2:	ef df       	rcall	.-34     	; 0x4a2 <displayLCD_main>
	displayLCD_main(3, "Humidity: ", rel_humidity, " %");
 4c4:	20 e5       	ldi	r18, 0x50	; 80
 4c6:	31 e0       	ldi	r19, 0x01	; 1
 4c8:	41 e4       	ldi	r20, 0x41	; 65
 4ca:	63 e5       	ldi	r22, 0x53	; 83
 4cc:	71 e0       	ldi	r23, 0x01	; 1
 4ce:	83 e0       	ldi	r24, 0x03	; 3
 4d0:	e8 df       	rcall	.-48     	; 0x4a2 <displayLCD_main>
	displayLCD_main(4, "Enjoy tinkering!", NONE, "NONE");
 4d2:	20 e0       	ldi	r18, 0x00	; 0
 4d4:	31 e0       	ldi	r19, 0x01	; 1
 4d6:	4f ef       	ldi	r20, 0xFF	; 255
 4d8:	6e e5       	ldi	r22, 0x5E	; 94
 4da:	71 e0       	ldi	r23, 0x01	; 1
 4dc:	84 e0       	ldi	r24, 0x04	; 4
 4de:	e1 df       	rcall	.-62     	; 0x4a2 <displayLCD_main>

	return 0;
 4e0:	80 e0       	ldi	r24, 0x00	; 0
 4e2:	90 e0       	ldi	r25, 0x00	; 0
 4e4:	08 95       	ret

000004e6 <strcmp>:
 4e6:	fb 01       	movw	r30, r22
 4e8:	dc 01       	movw	r26, r24
 4ea:	8d 91       	ld	r24, X+
 4ec:	01 90       	ld	r0, Z+
 4ee:	80 19       	sub	r24, r0
 4f0:	01 10       	cpse	r0, r1
 4f2:	d9 f3       	breq	.-10     	; 0x4ea <strcmp+0x4>
 4f4:	99 0b       	sbc	r25, r25
 4f6:	08 95       	ret

000004f8 <__itoa_ncheck>:
 4f8:	bb 27       	eor	r27, r27
 4fa:	4a 30       	cpi	r20, 0x0A	; 10
 4fc:	31 f4       	brne	.+12     	; 0x50a <__itoa_ncheck+0x12>
 4fe:	99 23       	and	r25, r25
 500:	22 f4       	brpl	.+8      	; 0x50a <__itoa_ncheck+0x12>
 502:	bd e2       	ldi	r27, 0x2D	; 45
 504:	90 95       	com	r25
 506:	81 95       	neg	r24
 508:	9f 4f       	sbci	r25, 0xFF	; 255
 50a:	01 c0       	rjmp	.+2      	; 0x50e <__utoa_common>

0000050c <__utoa_ncheck>:
 50c:	bb 27       	eor	r27, r27

0000050e <__utoa_common>:
 50e:	fb 01       	movw	r30, r22
 510:	55 27       	eor	r21, r21
 512:	aa 27       	eor	r26, r26
 514:	88 0f       	add	r24, r24
 516:	99 1f       	adc	r25, r25
 518:	aa 1f       	adc	r26, r26
 51a:	a4 17       	cp	r26, r20
 51c:	10 f0       	brcs	.+4      	; 0x522 <__utoa_common+0x14>
 51e:	a4 1b       	sub	r26, r20
 520:	83 95       	inc	r24
 522:	50 51       	subi	r21, 0x10	; 16
 524:	b9 f7       	brne	.-18     	; 0x514 <__utoa_common+0x6>
 526:	a0 5d       	subi	r26, 0xD0	; 208
 528:	aa 33       	cpi	r26, 0x3A	; 58
 52a:	08 f0       	brcs	.+2      	; 0x52e <__utoa_common+0x20>
 52c:	a9 5d       	subi	r26, 0xD9	; 217
 52e:	a1 93       	st	Z+, r26
 530:	00 97       	sbiw	r24, 0x00	; 0
 532:	79 f7       	brne	.-34     	; 0x512 <__utoa_common+0x4>
 534:	b1 11       	cpse	r27, r1
 536:	b1 93       	st	Z+, r27
 538:	11 92       	st	Z+, r1
 53a:	cb 01       	movw	r24, r22
 53c:	15 c2       	rjmp	.+1066   	; 0x968 <strrev>

0000053e <snprintf>:
 53e:	ae e0       	ldi	r26, 0x0E	; 14
 540:	b0 e0       	ldi	r27, 0x00	; 0
 542:	e4 ea       	ldi	r30, 0xA4	; 164
 544:	f2 e0       	ldi	r31, 0x02	; 2
 546:	c8 c2       	rjmp	.+1424   	; 0xad8 <__prologue_saves__+0x1c>
 548:	0d 89       	ldd	r16, Y+21	; 0x15
 54a:	1e 89       	ldd	r17, Y+22	; 0x16
 54c:	8f 89       	ldd	r24, Y+23	; 0x17
 54e:	98 8d       	ldd	r25, Y+24	; 0x18
 550:	26 e0       	ldi	r18, 0x06	; 6
 552:	2c 83       	std	Y+4, r18	; 0x04
 554:	1a 83       	std	Y+2, r17	; 0x02
 556:	09 83       	std	Y+1, r16	; 0x01
 558:	97 ff       	sbrs	r25, 7
 55a:	02 c0       	rjmp	.+4      	; 0x560 <snprintf+0x22>
 55c:	80 e0       	ldi	r24, 0x00	; 0
 55e:	90 e8       	ldi	r25, 0x80	; 128
 560:	01 97       	sbiw	r24, 0x01	; 1
 562:	9e 83       	std	Y+6, r25	; 0x06
 564:	8d 83       	std	Y+5, r24	; 0x05
 566:	ae 01       	movw	r20, r28
 568:	45 5e       	subi	r20, 0xE5	; 229
 56a:	5f 4f       	sbci	r21, 0xFF	; 255
 56c:	69 8d       	ldd	r22, Y+25	; 0x19
 56e:	7a 8d       	ldd	r23, Y+26	; 0x1a
 570:	ce 01       	movw	r24, r28
 572:	01 96       	adiw	r24, 0x01	; 1
 574:	11 d0       	rcall	.+34     	; 0x598 <vfprintf>
 576:	4d 81       	ldd	r20, Y+5	; 0x05
 578:	5e 81       	ldd	r21, Y+6	; 0x06
 57a:	57 fd       	sbrc	r21, 7
 57c:	0a c0       	rjmp	.+20     	; 0x592 <snprintf+0x54>
 57e:	2f 81       	ldd	r18, Y+7	; 0x07
 580:	38 85       	ldd	r19, Y+8	; 0x08
 582:	42 17       	cp	r20, r18
 584:	53 07       	cpc	r21, r19
 586:	0c f4       	brge	.+2      	; 0x58a <snprintf+0x4c>
 588:	9a 01       	movw	r18, r20
 58a:	f8 01       	movw	r30, r16
 58c:	e2 0f       	add	r30, r18
 58e:	f3 1f       	adc	r31, r19
 590:	10 82       	st	Z, r1
 592:	2e 96       	adiw	r28, 0x0e	; 14
 594:	e4 e0       	ldi	r30, 0x04	; 4
 596:	bc c2       	rjmp	.+1400   	; 0xb10 <__epilogue_restores__+0x1c>

00000598 <vfprintf>:
 598:	ab e0       	ldi	r26, 0x0B	; 11
 59a:	b0 e0       	ldi	r27, 0x00	; 0
 59c:	e1 ed       	ldi	r30, 0xD1	; 209
 59e:	f2 e0       	ldi	r31, 0x02	; 2
 5a0:	8d c2       	rjmp	.+1306   	; 0xabc <__prologue_saves__>
 5a2:	6c 01       	movw	r12, r24
 5a4:	7b 01       	movw	r14, r22
 5a6:	8a 01       	movw	r16, r20
 5a8:	fc 01       	movw	r30, r24
 5aa:	17 82       	std	Z+7, r1	; 0x07
 5ac:	16 82       	std	Z+6, r1	; 0x06
 5ae:	83 81       	ldd	r24, Z+3	; 0x03
 5b0:	81 ff       	sbrs	r24, 1
 5b2:	bf c1       	rjmp	.+894    	; 0x932 <__stack+0x33>
 5b4:	ce 01       	movw	r24, r28
 5b6:	01 96       	adiw	r24, 0x01	; 1
 5b8:	3c 01       	movw	r6, r24
 5ba:	f6 01       	movw	r30, r12
 5bc:	93 81       	ldd	r25, Z+3	; 0x03
 5be:	f7 01       	movw	r30, r14
 5c0:	93 fd       	sbrc	r25, 3
 5c2:	85 91       	lpm	r24, Z+
 5c4:	93 ff       	sbrs	r25, 3
 5c6:	81 91       	ld	r24, Z+
 5c8:	7f 01       	movw	r14, r30
 5ca:	88 23       	and	r24, r24
 5cc:	09 f4       	brne	.+2      	; 0x5d0 <vfprintf+0x38>
 5ce:	ad c1       	rjmp	.+858    	; 0x92a <__stack+0x2b>
 5d0:	85 32       	cpi	r24, 0x25	; 37
 5d2:	39 f4       	brne	.+14     	; 0x5e2 <vfprintf+0x4a>
 5d4:	93 fd       	sbrc	r25, 3
 5d6:	85 91       	lpm	r24, Z+
 5d8:	93 ff       	sbrs	r25, 3
 5da:	81 91       	ld	r24, Z+
 5dc:	7f 01       	movw	r14, r30
 5de:	85 32       	cpi	r24, 0x25	; 37
 5e0:	21 f4       	brne	.+8      	; 0x5ea <vfprintf+0x52>
 5e2:	b6 01       	movw	r22, r12
 5e4:	90 e0       	ldi	r25, 0x00	; 0
 5e6:	d0 d1       	rcall	.+928    	; 0x988 <fputc>
 5e8:	e8 cf       	rjmp	.-48     	; 0x5ba <vfprintf+0x22>
 5ea:	91 2c       	mov	r9, r1
 5ec:	21 2c       	mov	r2, r1
 5ee:	31 2c       	mov	r3, r1
 5f0:	ff e1       	ldi	r31, 0x1F	; 31
 5f2:	f3 15       	cp	r31, r3
 5f4:	d8 f0       	brcs	.+54     	; 0x62c <vfprintf+0x94>
 5f6:	8b 32       	cpi	r24, 0x2B	; 43
 5f8:	79 f0       	breq	.+30     	; 0x618 <vfprintf+0x80>
 5fa:	38 f4       	brcc	.+14     	; 0x60a <vfprintf+0x72>
 5fc:	80 32       	cpi	r24, 0x20	; 32
 5fe:	79 f0       	breq	.+30     	; 0x61e <vfprintf+0x86>
 600:	83 32       	cpi	r24, 0x23	; 35
 602:	a1 f4       	brne	.+40     	; 0x62c <vfprintf+0x94>
 604:	23 2d       	mov	r18, r3
 606:	20 61       	ori	r18, 0x10	; 16
 608:	1d c0       	rjmp	.+58     	; 0x644 <vfprintf+0xac>
 60a:	8d 32       	cpi	r24, 0x2D	; 45
 60c:	61 f0       	breq	.+24     	; 0x626 <vfprintf+0x8e>
 60e:	80 33       	cpi	r24, 0x30	; 48
 610:	69 f4       	brne	.+26     	; 0x62c <vfprintf+0x94>
 612:	23 2d       	mov	r18, r3
 614:	21 60       	ori	r18, 0x01	; 1
 616:	16 c0       	rjmp	.+44     	; 0x644 <vfprintf+0xac>
 618:	83 2d       	mov	r24, r3
 61a:	82 60       	ori	r24, 0x02	; 2
 61c:	38 2e       	mov	r3, r24
 61e:	e3 2d       	mov	r30, r3
 620:	e4 60       	ori	r30, 0x04	; 4
 622:	3e 2e       	mov	r3, r30
 624:	2a c0       	rjmp	.+84     	; 0x67a <vfprintf+0xe2>
 626:	f3 2d       	mov	r31, r3
 628:	f8 60       	ori	r31, 0x08	; 8
 62a:	1d c0       	rjmp	.+58     	; 0x666 <vfprintf+0xce>
 62c:	37 fc       	sbrc	r3, 7
 62e:	2d c0       	rjmp	.+90     	; 0x68a <vfprintf+0xf2>
 630:	20 ed       	ldi	r18, 0xD0	; 208
 632:	28 0f       	add	r18, r24
 634:	2a 30       	cpi	r18, 0x0A	; 10
 636:	40 f0       	brcs	.+16     	; 0x648 <vfprintf+0xb0>
 638:	8e 32       	cpi	r24, 0x2E	; 46
 63a:	b9 f4       	brne	.+46     	; 0x66a <vfprintf+0xd2>
 63c:	36 fc       	sbrc	r3, 6
 63e:	75 c1       	rjmp	.+746    	; 0x92a <__stack+0x2b>
 640:	23 2d       	mov	r18, r3
 642:	20 64       	ori	r18, 0x40	; 64
 644:	32 2e       	mov	r3, r18
 646:	19 c0       	rjmp	.+50     	; 0x67a <vfprintf+0xe2>
 648:	36 fe       	sbrs	r3, 6
 64a:	06 c0       	rjmp	.+12     	; 0x658 <vfprintf+0xc0>
 64c:	8a e0       	ldi	r24, 0x0A	; 10
 64e:	98 9e       	mul	r9, r24
 650:	20 0d       	add	r18, r0
 652:	11 24       	eor	r1, r1
 654:	92 2e       	mov	r9, r18
 656:	11 c0       	rjmp	.+34     	; 0x67a <vfprintf+0xe2>
 658:	ea e0       	ldi	r30, 0x0A	; 10
 65a:	2e 9e       	mul	r2, r30
 65c:	20 0d       	add	r18, r0
 65e:	11 24       	eor	r1, r1
 660:	22 2e       	mov	r2, r18
 662:	f3 2d       	mov	r31, r3
 664:	f0 62       	ori	r31, 0x20	; 32
 666:	3f 2e       	mov	r3, r31
 668:	08 c0       	rjmp	.+16     	; 0x67a <vfprintf+0xe2>
 66a:	8c 36       	cpi	r24, 0x6C	; 108
 66c:	21 f4       	brne	.+8      	; 0x676 <vfprintf+0xde>
 66e:	83 2d       	mov	r24, r3
 670:	80 68       	ori	r24, 0x80	; 128
 672:	38 2e       	mov	r3, r24
 674:	02 c0       	rjmp	.+4      	; 0x67a <vfprintf+0xe2>
 676:	88 36       	cpi	r24, 0x68	; 104
 678:	41 f4       	brne	.+16     	; 0x68a <vfprintf+0xf2>
 67a:	f7 01       	movw	r30, r14
 67c:	93 fd       	sbrc	r25, 3
 67e:	85 91       	lpm	r24, Z+
 680:	93 ff       	sbrs	r25, 3
 682:	81 91       	ld	r24, Z+
 684:	7f 01       	movw	r14, r30
 686:	81 11       	cpse	r24, r1
 688:	b3 cf       	rjmp	.-154    	; 0x5f0 <vfprintf+0x58>
 68a:	98 2f       	mov	r25, r24
 68c:	9f 7d       	andi	r25, 0xDF	; 223
 68e:	95 54       	subi	r25, 0x45	; 69
 690:	93 30       	cpi	r25, 0x03	; 3
 692:	28 f4       	brcc	.+10     	; 0x69e <vfprintf+0x106>
 694:	0c 5f       	subi	r16, 0xFC	; 252
 696:	1f 4f       	sbci	r17, 0xFF	; 255
 698:	9f e3       	ldi	r25, 0x3F	; 63
 69a:	99 83       	std	Y+1, r25	; 0x01
 69c:	0d c0       	rjmp	.+26     	; 0x6b8 <vfprintf+0x120>
 69e:	83 36       	cpi	r24, 0x63	; 99
 6a0:	31 f0       	breq	.+12     	; 0x6ae <vfprintf+0x116>
 6a2:	83 37       	cpi	r24, 0x73	; 115
 6a4:	71 f0       	breq	.+28     	; 0x6c2 <vfprintf+0x12a>
 6a6:	83 35       	cpi	r24, 0x53	; 83
 6a8:	09 f0       	breq	.+2      	; 0x6ac <vfprintf+0x114>
 6aa:	55 c0       	rjmp	.+170    	; 0x756 <vfprintf+0x1be>
 6ac:	20 c0       	rjmp	.+64     	; 0x6ee <vfprintf+0x156>
 6ae:	f8 01       	movw	r30, r16
 6b0:	80 81       	ld	r24, Z
 6b2:	89 83       	std	Y+1, r24	; 0x01
 6b4:	0e 5f       	subi	r16, 0xFE	; 254
 6b6:	1f 4f       	sbci	r17, 0xFF	; 255
 6b8:	88 24       	eor	r8, r8
 6ba:	83 94       	inc	r8
 6bc:	91 2c       	mov	r9, r1
 6be:	53 01       	movw	r10, r6
 6c0:	12 c0       	rjmp	.+36     	; 0x6e6 <vfprintf+0x14e>
 6c2:	28 01       	movw	r4, r16
 6c4:	f2 e0       	ldi	r31, 0x02	; 2
 6c6:	4f 0e       	add	r4, r31
 6c8:	51 1c       	adc	r5, r1
 6ca:	f8 01       	movw	r30, r16
 6cc:	a0 80       	ld	r10, Z
 6ce:	b1 80       	ldd	r11, Z+1	; 0x01
 6d0:	36 fe       	sbrs	r3, 6
 6d2:	03 c0       	rjmp	.+6      	; 0x6da <vfprintf+0x142>
 6d4:	69 2d       	mov	r22, r9
 6d6:	70 e0       	ldi	r23, 0x00	; 0
 6d8:	02 c0       	rjmp	.+4      	; 0x6de <vfprintf+0x146>
 6da:	6f ef       	ldi	r22, 0xFF	; 255
 6dc:	7f ef       	ldi	r23, 0xFF	; 255
 6de:	c5 01       	movw	r24, r10
 6e0:	38 d1       	rcall	.+624    	; 0x952 <strnlen>
 6e2:	4c 01       	movw	r8, r24
 6e4:	82 01       	movw	r16, r4
 6e6:	f3 2d       	mov	r31, r3
 6e8:	ff 77       	andi	r31, 0x7F	; 127
 6ea:	3f 2e       	mov	r3, r31
 6ec:	15 c0       	rjmp	.+42     	; 0x718 <vfprintf+0x180>
 6ee:	28 01       	movw	r4, r16
 6f0:	22 e0       	ldi	r18, 0x02	; 2
 6f2:	42 0e       	add	r4, r18
 6f4:	51 1c       	adc	r5, r1
 6f6:	f8 01       	movw	r30, r16
 6f8:	a0 80       	ld	r10, Z
 6fa:	b1 80       	ldd	r11, Z+1	; 0x01
 6fc:	36 fe       	sbrs	r3, 6
 6fe:	03 c0       	rjmp	.+6      	; 0x706 <vfprintf+0x16e>
 700:	69 2d       	mov	r22, r9
 702:	70 e0       	ldi	r23, 0x00	; 0
 704:	02 c0       	rjmp	.+4      	; 0x70a <vfprintf+0x172>
 706:	6f ef       	ldi	r22, 0xFF	; 255
 708:	7f ef       	ldi	r23, 0xFF	; 255
 70a:	c5 01       	movw	r24, r10
 70c:	17 d1       	rcall	.+558    	; 0x93c <strnlen_P>
 70e:	4c 01       	movw	r8, r24
 710:	f3 2d       	mov	r31, r3
 712:	f0 68       	ori	r31, 0x80	; 128
 714:	3f 2e       	mov	r3, r31
 716:	82 01       	movw	r16, r4
 718:	33 fc       	sbrc	r3, 3
 71a:	19 c0       	rjmp	.+50     	; 0x74e <vfprintf+0x1b6>
 71c:	82 2d       	mov	r24, r2
 71e:	90 e0       	ldi	r25, 0x00	; 0
 720:	88 16       	cp	r8, r24
 722:	99 06       	cpc	r9, r25
 724:	a0 f4       	brcc	.+40     	; 0x74e <vfprintf+0x1b6>
 726:	b6 01       	movw	r22, r12
 728:	80 e2       	ldi	r24, 0x20	; 32
 72a:	90 e0       	ldi	r25, 0x00	; 0
 72c:	2d d1       	rcall	.+602    	; 0x988 <fputc>
 72e:	2a 94       	dec	r2
 730:	f5 cf       	rjmp	.-22     	; 0x71c <vfprintf+0x184>
 732:	f5 01       	movw	r30, r10
 734:	37 fc       	sbrc	r3, 7
 736:	85 91       	lpm	r24, Z+
 738:	37 fe       	sbrs	r3, 7
 73a:	81 91       	ld	r24, Z+
 73c:	5f 01       	movw	r10, r30
 73e:	b6 01       	movw	r22, r12
 740:	90 e0       	ldi	r25, 0x00	; 0
 742:	22 d1       	rcall	.+580    	; 0x988 <fputc>
 744:	21 10       	cpse	r2, r1
 746:	2a 94       	dec	r2
 748:	21 e0       	ldi	r18, 0x01	; 1
 74a:	82 1a       	sub	r8, r18
 74c:	91 08       	sbc	r9, r1
 74e:	81 14       	cp	r8, r1
 750:	91 04       	cpc	r9, r1
 752:	79 f7       	brne	.-34     	; 0x732 <vfprintf+0x19a>
 754:	e1 c0       	rjmp	.+450    	; 0x918 <__stack+0x19>
 756:	84 36       	cpi	r24, 0x64	; 100
 758:	11 f0       	breq	.+4      	; 0x75e <vfprintf+0x1c6>
 75a:	89 36       	cpi	r24, 0x69	; 105
 75c:	39 f5       	brne	.+78     	; 0x7ac <vfprintf+0x214>
 75e:	f8 01       	movw	r30, r16
 760:	37 fe       	sbrs	r3, 7
 762:	07 c0       	rjmp	.+14     	; 0x772 <vfprintf+0x1da>
 764:	60 81       	ld	r22, Z
 766:	71 81       	ldd	r23, Z+1	; 0x01
 768:	82 81       	ldd	r24, Z+2	; 0x02
 76a:	93 81       	ldd	r25, Z+3	; 0x03
 76c:	0c 5f       	subi	r16, 0xFC	; 252
 76e:	1f 4f       	sbci	r17, 0xFF	; 255
 770:	08 c0       	rjmp	.+16     	; 0x782 <vfprintf+0x1ea>
 772:	60 81       	ld	r22, Z
 774:	71 81       	ldd	r23, Z+1	; 0x01
 776:	07 2e       	mov	r0, r23
 778:	00 0c       	add	r0, r0
 77a:	88 0b       	sbc	r24, r24
 77c:	99 0b       	sbc	r25, r25
 77e:	0e 5f       	subi	r16, 0xFE	; 254
 780:	1f 4f       	sbci	r17, 0xFF	; 255
 782:	f3 2d       	mov	r31, r3
 784:	ff 76       	andi	r31, 0x6F	; 111
 786:	3f 2e       	mov	r3, r31
 788:	97 ff       	sbrs	r25, 7
 78a:	09 c0       	rjmp	.+18     	; 0x79e <vfprintf+0x206>
 78c:	90 95       	com	r25
 78e:	80 95       	com	r24
 790:	70 95       	com	r23
 792:	61 95       	neg	r22
 794:	7f 4f       	sbci	r23, 0xFF	; 255
 796:	8f 4f       	sbci	r24, 0xFF	; 255
 798:	9f 4f       	sbci	r25, 0xFF	; 255
 79a:	f0 68       	ori	r31, 0x80	; 128
 79c:	3f 2e       	mov	r3, r31
 79e:	2a e0       	ldi	r18, 0x0A	; 10
 7a0:	30 e0       	ldi	r19, 0x00	; 0
 7a2:	a3 01       	movw	r20, r6
 7a4:	2d d1       	rcall	.+602    	; 0xa00 <__ultoa_invert>
 7a6:	88 2e       	mov	r8, r24
 7a8:	86 18       	sub	r8, r6
 7aa:	44 c0       	rjmp	.+136    	; 0x834 <vfprintf+0x29c>
 7ac:	85 37       	cpi	r24, 0x75	; 117
 7ae:	31 f4       	brne	.+12     	; 0x7bc <vfprintf+0x224>
 7b0:	23 2d       	mov	r18, r3
 7b2:	2f 7e       	andi	r18, 0xEF	; 239
 7b4:	b2 2e       	mov	r11, r18
 7b6:	2a e0       	ldi	r18, 0x0A	; 10
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	25 c0       	rjmp	.+74     	; 0x806 <vfprintf+0x26e>
 7bc:	93 2d       	mov	r25, r3
 7be:	99 7f       	andi	r25, 0xF9	; 249
 7c0:	b9 2e       	mov	r11, r25
 7c2:	8f 36       	cpi	r24, 0x6F	; 111
 7c4:	c1 f0       	breq	.+48     	; 0x7f6 <vfprintf+0x25e>
 7c6:	18 f4       	brcc	.+6      	; 0x7ce <vfprintf+0x236>
 7c8:	88 35       	cpi	r24, 0x58	; 88
 7ca:	79 f0       	breq	.+30     	; 0x7ea <vfprintf+0x252>
 7cc:	ae c0       	rjmp	.+348    	; 0x92a <__stack+0x2b>
 7ce:	80 37       	cpi	r24, 0x70	; 112
 7d0:	19 f0       	breq	.+6      	; 0x7d8 <vfprintf+0x240>
 7d2:	88 37       	cpi	r24, 0x78	; 120
 7d4:	21 f0       	breq	.+8      	; 0x7de <vfprintf+0x246>
 7d6:	a9 c0       	rjmp	.+338    	; 0x92a <__stack+0x2b>
 7d8:	e9 2f       	mov	r30, r25
 7da:	e0 61       	ori	r30, 0x10	; 16
 7dc:	be 2e       	mov	r11, r30
 7de:	b4 fe       	sbrs	r11, 4
 7e0:	0d c0       	rjmp	.+26     	; 0x7fc <vfprintf+0x264>
 7e2:	fb 2d       	mov	r31, r11
 7e4:	f4 60       	ori	r31, 0x04	; 4
 7e6:	bf 2e       	mov	r11, r31
 7e8:	09 c0       	rjmp	.+18     	; 0x7fc <vfprintf+0x264>
 7ea:	34 fe       	sbrs	r3, 4
 7ec:	0a c0       	rjmp	.+20     	; 0x802 <vfprintf+0x26a>
 7ee:	29 2f       	mov	r18, r25
 7f0:	26 60       	ori	r18, 0x06	; 6
 7f2:	b2 2e       	mov	r11, r18
 7f4:	06 c0       	rjmp	.+12     	; 0x802 <vfprintf+0x26a>
 7f6:	28 e0       	ldi	r18, 0x08	; 8
 7f8:	30 e0       	ldi	r19, 0x00	; 0
 7fa:	05 c0       	rjmp	.+10     	; 0x806 <vfprintf+0x26e>
 7fc:	20 e1       	ldi	r18, 0x10	; 16
 7fe:	30 e0       	ldi	r19, 0x00	; 0
 800:	02 c0       	rjmp	.+4      	; 0x806 <vfprintf+0x26e>
 802:	20 e1       	ldi	r18, 0x10	; 16
 804:	32 e0       	ldi	r19, 0x02	; 2
 806:	f8 01       	movw	r30, r16
 808:	b7 fe       	sbrs	r11, 7
 80a:	07 c0       	rjmp	.+14     	; 0x81a <vfprintf+0x282>
 80c:	60 81       	ld	r22, Z
 80e:	71 81       	ldd	r23, Z+1	; 0x01
 810:	82 81       	ldd	r24, Z+2	; 0x02
 812:	93 81       	ldd	r25, Z+3	; 0x03
 814:	0c 5f       	subi	r16, 0xFC	; 252
 816:	1f 4f       	sbci	r17, 0xFF	; 255
 818:	06 c0       	rjmp	.+12     	; 0x826 <vfprintf+0x28e>
 81a:	60 81       	ld	r22, Z
 81c:	71 81       	ldd	r23, Z+1	; 0x01
 81e:	80 e0       	ldi	r24, 0x00	; 0
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	0e 5f       	subi	r16, 0xFE	; 254
 824:	1f 4f       	sbci	r17, 0xFF	; 255
 826:	a3 01       	movw	r20, r6
 828:	eb d0       	rcall	.+470    	; 0xa00 <__ultoa_invert>
 82a:	88 2e       	mov	r8, r24
 82c:	86 18       	sub	r8, r6
 82e:	fb 2d       	mov	r31, r11
 830:	ff 77       	andi	r31, 0x7F	; 127
 832:	3f 2e       	mov	r3, r31
 834:	36 fe       	sbrs	r3, 6
 836:	0d c0       	rjmp	.+26     	; 0x852 <vfprintf+0x2ba>
 838:	23 2d       	mov	r18, r3
 83a:	2e 7f       	andi	r18, 0xFE	; 254
 83c:	a2 2e       	mov	r10, r18
 83e:	89 14       	cp	r8, r9
 840:	58 f4       	brcc	.+22     	; 0x858 <vfprintf+0x2c0>
 842:	34 fe       	sbrs	r3, 4
 844:	0b c0       	rjmp	.+22     	; 0x85c <vfprintf+0x2c4>
 846:	32 fc       	sbrc	r3, 2
 848:	09 c0       	rjmp	.+18     	; 0x85c <vfprintf+0x2c4>
 84a:	83 2d       	mov	r24, r3
 84c:	8e 7e       	andi	r24, 0xEE	; 238
 84e:	a8 2e       	mov	r10, r24
 850:	05 c0       	rjmp	.+10     	; 0x85c <vfprintf+0x2c4>
 852:	b8 2c       	mov	r11, r8
 854:	a3 2c       	mov	r10, r3
 856:	03 c0       	rjmp	.+6      	; 0x85e <vfprintf+0x2c6>
 858:	b8 2c       	mov	r11, r8
 85a:	01 c0       	rjmp	.+2      	; 0x85e <vfprintf+0x2c6>
 85c:	b9 2c       	mov	r11, r9
 85e:	a4 fe       	sbrs	r10, 4
 860:	0f c0       	rjmp	.+30     	; 0x880 <vfprintf+0x2e8>
 862:	fe 01       	movw	r30, r28
 864:	e8 0d       	add	r30, r8
 866:	f1 1d       	adc	r31, r1
 868:	80 81       	ld	r24, Z
 86a:	80 33       	cpi	r24, 0x30	; 48
 86c:	21 f4       	brne	.+8      	; 0x876 <vfprintf+0x2de>
 86e:	9a 2d       	mov	r25, r10
 870:	99 7e       	andi	r25, 0xE9	; 233
 872:	a9 2e       	mov	r10, r25
 874:	09 c0       	rjmp	.+18     	; 0x888 <vfprintf+0x2f0>
 876:	a2 fe       	sbrs	r10, 2
 878:	06 c0       	rjmp	.+12     	; 0x886 <vfprintf+0x2ee>
 87a:	b3 94       	inc	r11
 87c:	b3 94       	inc	r11
 87e:	04 c0       	rjmp	.+8      	; 0x888 <vfprintf+0x2f0>
 880:	8a 2d       	mov	r24, r10
 882:	86 78       	andi	r24, 0x86	; 134
 884:	09 f0       	breq	.+2      	; 0x888 <vfprintf+0x2f0>
 886:	b3 94       	inc	r11
 888:	a3 fc       	sbrc	r10, 3
 88a:	10 c0       	rjmp	.+32     	; 0x8ac <vfprintf+0x314>
 88c:	a0 fe       	sbrs	r10, 0
 88e:	06 c0       	rjmp	.+12     	; 0x89c <vfprintf+0x304>
 890:	b2 14       	cp	r11, r2
 892:	80 f4       	brcc	.+32     	; 0x8b4 <vfprintf+0x31c>
 894:	28 0c       	add	r2, r8
 896:	92 2c       	mov	r9, r2
 898:	9b 18       	sub	r9, r11
 89a:	0d c0       	rjmp	.+26     	; 0x8b6 <vfprintf+0x31e>
 89c:	b2 14       	cp	r11, r2
 89e:	58 f4       	brcc	.+22     	; 0x8b6 <vfprintf+0x31e>
 8a0:	b6 01       	movw	r22, r12
 8a2:	80 e2       	ldi	r24, 0x20	; 32
 8a4:	90 e0       	ldi	r25, 0x00	; 0
 8a6:	70 d0       	rcall	.+224    	; 0x988 <fputc>
 8a8:	b3 94       	inc	r11
 8aa:	f8 cf       	rjmp	.-16     	; 0x89c <vfprintf+0x304>
 8ac:	b2 14       	cp	r11, r2
 8ae:	18 f4       	brcc	.+6      	; 0x8b6 <vfprintf+0x31e>
 8b0:	2b 18       	sub	r2, r11
 8b2:	02 c0       	rjmp	.+4      	; 0x8b8 <vfprintf+0x320>
 8b4:	98 2c       	mov	r9, r8
 8b6:	21 2c       	mov	r2, r1
 8b8:	a4 fe       	sbrs	r10, 4
 8ba:	0f c0       	rjmp	.+30     	; 0x8da <vfprintf+0x342>
 8bc:	b6 01       	movw	r22, r12
 8be:	80 e3       	ldi	r24, 0x30	; 48
 8c0:	90 e0       	ldi	r25, 0x00	; 0
 8c2:	62 d0       	rcall	.+196    	; 0x988 <fputc>
 8c4:	a2 fe       	sbrs	r10, 2
 8c6:	16 c0       	rjmp	.+44     	; 0x8f4 <vfprintf+0x35c>
 8c8:	a1 fc       	sbrc	r10, 1
 8ca:	03 c0       	rjmp	.+6      	; 0x8d2 <vfprintf+0x33a>
 8cc:	88 e7       	ldi	r24, 0x78	; 120
 8ce:	90 e0       	ldi	r25, 0x00	; 0
 8d0:	02 c0       	rjmp	.+4      	; 0x8d6 <vfprintf+0x33e>
 8d2:	88 e5       	ldi	r24, 0x58	; 88
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	b6 01       	movw	r22, r12
 8d8:	0c c0       	rjmp	.+24     	; 0x8f2 <vfprintf+0x35a>
 8da:	8a 2d       	mov	r24, r10
 8dc:	86 78       	andi	r24, 0x86	; 134
 8de:	51 f0       	breq	.+20     	; 0x8f4 <vfprintf+0x35c>
 8e0:	a1 fe       	sbrs	r10, 1
 8e2:	02 c0       	rjmp	.+4      	; 0x8e8 <vfprintf+0x350>
 8e4:	8b e2       	ldi	r24, 0x2B	; 43
 8e6:	01 c0       	rjmp	.+2      	; 0x8ea <vfprintf+0x352>
 8e8:	80 e2       	ldi	r24, 0x20	; 32
 8ea:	a7 fc       	sbrc	r10, 7
 8ec:	8d e2       	ldi	r24, 0x2D	; 45
 8ee:	b6 01       	movw	r22, r12
 8f0:	90 e0       	ldi	r25, 0x00	; 0
 8f2:	4a d0       	rcall	.+148    	; 0x988 <fputc>
 8f4:	89 14       	cp	r8, r9
 8f6:	30 f4       	brcc	.+12     	; 0x904 <__stack+0x5>
 8f8:	b6 01       	movw	r22, r12
 8fa:	80 e3       	ldi	r24, 0x30	; 48
 8fc:	90 e0       	ldi	r25, 0x00	; 0
 8fe:	44 d0       	rcall	.+136    	; 0x988 <fputc>
 900:	9a 94       	dec	r9
 902:	f8 cf       	rjmp	.-16     	; 0x8f4 <vfprintf+0x35c>
 904:	8a 94       	dec	r8
 906:	f3 01       	movw	r30, r6
 908:	e8 0d       	add	r30, r8
 90a:	f1 1d       	adc	r31, r1
 90c:	80 81       	ld	r24, Z
 90e:	b6 01       	movw	r22, r12
 910:	90 e0       	ldi	r25, 0x00	; 0
 912:	3a d0       	rcall	.+116    	; 0x988 <fputc>
 914:	81 10       	cpse	r8, r1
 916:	f6 cf       	rjmp	.-20     	; 0x904 <__stack+0x5>
 918:	22 20       	and	r2, r2
 91a:	09 f4       	brne	.+2      	; 0x91e <__stack+0x1f>
 91c:	4e ce       	rjmp	.-868    	; 0x5ba <vfprintf+0x22>
 91e:	b6 01       	movw	r22, r12
 920:	80 e2       	ldi	r24, 0x20	; 32
 922:	90 e0       	ldi	r25, 0x00	; 0
 924:	31 d0       	rcall	.+98     	; 0x988 <fputc>
 926:	2a 94       	dec	r2
 928:	f7 cf       	rjmp	.-18     	; 0x918 <__stack+0x19>
 92a:	f6 01       	movw	r30, r12
 92c:	86 81       	ldd	r24, Z+6	; 0x06
 92e:	97 81       	ldd	r25, Z+7	; 0x07
 930:	02 c0       	rjmp	.+4      	; 0x936 <__stack+0x37>
 932:	8f ef       	ldi	r24, 0xFF	; 255
 934:	9f ef       	ldi	r25, 0xFF	; 255
 936:	2b 96       	adiw	r28, 0x0b	; 11
 938:	e2 e1       	ldi	r30, 0x12	; 18
 93a:	dc c0       	rjmp	.+440    	; 0xaf4 <__epilogue_restores__>

0000093c <strnlen_P>:
 93c:	fc 01       	movw	r30, r24
 93e:	05 90       	lpm	r0, Z+
 940:	61 50       	subi	r22, 0x01	; 1
 942:	70 40       	sbci	r23, 0x00	; 0
 944:	01 10       	cpse	r0, r1
 946:	d8 f7       	brcc	.-10     	; 0x93e <strnlen_P+0x2>
 948:	80 95       	com	r24
 94a:	90 95       	com	r25
 94c:	8e 0f       	add	r24, r30
 94e:	9f 1f       	adc	r25, r31
 950:	08 95       	ret

00000952 <strnlen>:
 952:	fc 01       	movw	r30, r24
 954:	61 50       	subi	r22, 0x01	; 1
 956:	70 40       	sbci	r23, 0x00	; 0
 958:	01 90       	ld	r0, Z+
 95a:	01 10       	cpse	r0, r1
 95c:	d8 f7       	brcc	.-10     	; 0x954 <strnlen+0x2>
 95e:	80 95       	com	r24
 960:	90 95       	com	r25
 962:	8e 0f       	add	r24, r30
 964:	9f 1f       	adc	r25, r31
 966:	08 95       	ret

00000968 <strrev>:
 968:	dc 01       	movw	r26, r24
 96a:	fc 01       	movw	r30, r24
 96c:	67 2f       	mov	r22, r23
 96e:	71 91       	ld	r23, Z+
 970:	77 23       	and	r23, r23
 972:	e1 f7       	brne	.-8      	; 0x96c <strrev+0x4>
 974:	32 97       	sbiw	r30, 0x02	; 2
 976:	04 c0       	rjmp	.+8      	; 0x980 <strrev+0x18>
 978:	7c 91       	ld	r23, X
 97a:	6d 93       	st	X+, r22
 97c:	70 83       	st	Z, r23
 97e:	62 91       	ld	r22, -Z
 980:	ae 17       	cp	r26, r30
 982:	bf 07       	cpc	r27, r31
 984:	c8 f3       	brcs	.-14     	; 0x978 <strrev+0x10>
 986:	08 95       	ret

00000988 <fputc>:
 988:	0f 93       	push	r16
 98a:	1f 93       	push	r17
 98c:	cf 93       	push	r28
 98e:	df 93       	push	r29
 990:	fb 01       	movw	r30, r22
 992:	23 81       	ldd	r18, Z+3	; 0x03
 994:	21 fd       	sbrc	r18, 1
 996:	03 c0       	rjmp	.+6      	; 0x99e <fputc+0x16>
 998:	8f ef       	ldi	r24, 0xFF	; 255
 99a:	9f ef       	ldi	r25, 0xFF	; 255
 99c:	2c c0       	rjmp	.+88     	; 0x9f6 <fputc+0x6e>
 99e:	22 ff       	sbrs	r18, 2
 9a0:	16 c0       	rjmp	.+44     	; 0x9ce <fputc+0x46>
 9a2:	46 81       	ldd	r20, Z+6	; 0x06
 9a4:	57 81       	ldd	r21, Z+7	; 0x07
 9a6:	24 81       	ldd	r18, Z+4	; 0x04
 9a8:	35 81       	ldd	r19, Z+5	; 0x05
 9aa:	42 17       	cp	r20, r18
 9ac:	53 07       	cpc	r21, r19
 9ae:	44 f4       	brge	.+16     	; 0x9c0 <fputc+0x38>
 9b0:	a0 81       	ld	r26, Z
 9b2:	b1 81       	ldd	r27, Z+1	; 0x01
 9b4:	9d 01       	movw	r18, r26
 9b6:	2f 5f       	subi	r18, 0xFF	; 255
 9b8:	3f 4f       	sbci	r19, 0xFF	; 255
 9ba:	31 83       	std	Z+1, r19	; 0x01
 9bc:	20 83       	st	Z, r18
 9be:	8c 93       	st	X, r24
 9c0:	26 81       	ldd	r18, Z+6	; 0x06
 9c2:	37 81       	ldd	r19, Z+7	; 0x07
 9c4:	2f 5f       	subi	r18, 0xFF	; 255
 9c6:	3f 4f       	sbci	r19, 0xFF	; 255
 9c8:	37 83       	std	Z+7, r19	; 0x07
 9ca:	26 83       	std	Z+6, r18	; 0x06
 9cc:	14 c0       	rjmp	.+40     	; 0x9f6 <fputc+0x6e>
 9ce:	8b 01       	movw	r16, r22
 9d0:	ec 01       	movw	r28, r24
 9d2:	fb 01       	movw	r30, r22
 9d4:	00 84       	ldd	r0, Z+8	; 0x08
 9d6:	f1 85       	ldd	r31, Z+9	; 0x09
 9d8:	e0 2d       	mov	r30, r0
 9da:	09 95       	icall
 9dc:	89 2b       	or	r24, r25
 9de:	e1 f6       	brne	.-72     	; 0x998 <fputc+0x10>
 9e0:	d8 01       	movw	r26, r16
 9e2:	16 96       	adiw	r26, 0x06	; 6
 9e4:	8d 91       	ld	r24, X+
 9e6:	9c 91       	ld	r25, X
 9e8:	17 97       	sbiw	r26, 0x07	; 7
 9ea:	01 96       	adiw	r24, 0x01	; 1
 9ec:	17 96       	adiw	r26, 0x07	; 7
 9ee:	9c 93       	st	X, r25
 9f0:	8e 93       	st	-X, r24
 9f2:	16 97       	sbiw	r26, 0x06	; 6
 9f4:	ce 01       	movw	r24, r28
 9f6:	df 91       	pop	r29
 9f8:	cf 91       	pop	r28
 9fa:	1f 91       	pop	r17
 9fc:	0f 91       	pop	r16
 9fe:	08 95       	ret

00000a00 <__ultoa_invert>:
 a00:	fa 01       	movw	r30, r20
 a02:	aa 27       	eor	r26, r26
 a04:	28 30       	cpi	r18, 0x08	; 8
 a06:	51 f1       	breq	.+84     	; 0xa5c <__ultoa_invert+0x5c>
 a08:	20 31       	cpi	r18, 0x10	; 16
 a0a:	81 f1       	breq	.+96     	; 0xa6c <__ultoa_invert+0x6c>
 a0c:	e8 94       	clt
 a0e:	6f 93       	push	r22
 a10:	6e 7f       	andi	r22, 0xFE	; 254
 a12:	6e 5f       	subi	r22, 0xFE	; 254
 a14:	7f 4f       	sbci	r23, 0xFF	; 255
 a16:	8f 4f       	sbci	r24, 0xFF	; 255
 a18:	9f 4f       	sbci	r25, 0xFF	; 255
 a1a:	af 4f       	sbci	r26, 0xFF	; 255
 a1c:	b1 e0       	ldi	r27, 0x01	; 1
 a1e:	3e d0       	rcall	.+124    	; 0xa9c <__ultoa_invert+0x9c>
 a20:	b4 e0       	ldi	r27, 0x04	; 4
 a22:	3c d0       	rcall	.+120    	; 0xa9c <__ultoa_invert+0x9c>
 a24:	67 0f       	add	r22, r23
 a26:	78 1f       	adc	r23, r24
 a28:	89 1f       	adc	r24, r25
 a2a:	9a 1f       	adc	r25, r26
 a2c:	a1 1d       	adc	r26, r1
 a2e:	68 0f       	add	r22, r24
 a30:	79 1f       	adc	r23, r25
 a32:	8a 1f       	adc	r24, r26
 a34:	91 1d       	adc	r25, r1
 a36:	a1 1d       	adc	r26, r1
 a38:	6a 0f       	add	r22, r26
 a3a:	71 1d       	adc	r23, r1
 a3c:	81 1d       	adc	r24, r1
 a3e:	91 1d       	adc	r25, r1
 a40:	a1 1d       	adc	r26, r1
 a42:	20 d0       	rcall	.+64     	; 0xa84 <__ultoa_invert+0x84>
 a44:	09 f4       	brne	.+2      	; 0xa48 <__ultoa_invert+0x48>
 a46:	68 94       	set
 a48:	3f 91       	pop	r19
 a4a:	2a e0       	ldi	r18, 0x0A	; 10
 a4c:	26 9f       	mul	r18, r22
 a4e:	11 24       	eor	r1, r1
 a50:	30 19       	sub	r19, r0
 a52:	30 5d       	subi	r19, 0xD0	; 208
 a54:	31 93       	st	Z+, r19
 a56:	de f6       	brtc	.-74     	; 0xa0e <__ultoa_invert+0xe>
 a58:	cf 01       	movw	r24, r30
 a5a:	08 95       	ret
 a5c:	46 2f       	mov	r20, r22
 a5e:	47 70       	andi	r20, 0x07	; 7
 a60:	40 5d       	subi	r20, 0xD0	; 208
 a62:	41 93       	st	Z+, r20
 a64:	b3 e0       	ldi	r27, 0x03	; 3
 a66:	0f d0       	rcall	.+30     	; 0xa86 <__ultoa_invert+0x86>
 a68:	c9 f7       	brne	.-14     	; 0xa5c <__ultoa_invert+0x5c>
 a6a:	f6 cf       	rjmp	.-20     	; 0xa58 <__ultoa_invert+0x58>
 a6c:	46 2f       	mov	r20, r22
 a6e:	4f 70       	andi	r20, 0x0F	; 15
 a70:	40 5d       	subi	r20, 0xD0	; 208
 a72:	4a 33       	cpi	r20, 0x3A	; 58
 a74:	18 f0       	brcs	.+6      	; 0xa7c <__ultoa_invert+0x7c>
 a76:	49 5d       	subi	r20, 0xD9	; 217
 a78:	31 fd       	sbrc	r19, 1
 a7a:	40 52       	subi	r20, 0x20	; 32
 a7c:	41 93       	st	Z+, r20
 a7e:	02 d0       	rcall	.+4      	; 0xa84 <__ultoa_invert+0x84>
 a80:	a9 f7       	brne	.-22     	; 0xa6c <__ultoa_invert+0x6c>
 a82:	ea cf       	rjmp	.-44     	; 0xa58 <__ultoa_invert+0x58>
 a84:	b4 e0       	ldi	r27, 0x04	; 4
 a86:	a6 95       	lsr	r26
 a88:	97 95       	ror	r25
 a8a:	87 95       	ror	r24
 a8c:	77 95       	ror	r23
 a8e:	67 95       	ror	r22
 a90:	ba 95       	dec	r27
 a92:	c9 f7       	brne	.-14     	; 0xa86 <__ultoa_invert+0x86>
 a94:	00 97       	sbiw	r24, 0x00	; 0
 a96:	61 05       	cpc	r22, r1
 a98:	71 05       	cpc	r23, r1
 a9a:	08 95       	ret
 a9c:	9b 01       	movw	r18, r22
 a9e:	ac 01       	movw	r20, r24
 aa0:	0a 2e       	mov	r0, r26
 aa2:	06 94       	lsr	r0
 aa4:	57 95       	ror	r21
 aa6:	47 95       	ror	r20
 aa8:	37 95       	ror	r19
 aaa:	27 95       	ror	r18
 aac:	ba 95       	dec	r27
 aae:	c9 f7       	brne	.-14     	; 0xaa2 <__ultoa_invert+0xa2>
 ab0:	62 0f       	add	r22, r18
 ab2:	73 1f       	adc	r23, r19
 ab4:	84 1f       	adc	r24, r20
 ab6:	95 1f       	adc	r25, r21
 ab8:	a0 1d       	adc	r26, r0
 aba:	08 95       	ret

00000abc <__prologue_saves__>:
 abc:	2f 92       	push	r2
 abe:	3f 92       	push	r3
 ac0:	4f 92       	push	r4
 ac2:	5f 92       	push	r5
 ac4:	6f 92       	push	r6
 ac6:	7f 92       	push	r7
 ac8:	8f 92       	push	r8
 aca:	9f 92       	push	r9
 acc:	af 92       	push	r10
 ace:	bf 92       	push	r11
 ad0:	cf 92       	push	r12
 ad2:	df 92       	push	r13
 ad4:	ef 92       	push	r14
 ad6:	ff 92       	push	r15
 ad8:	0f 93       	push	r16
 ada:	1f 93       	push	r17
 adc:	cf 93       	push	r28
 ade:	df 93       	push	r29
 ae0:	cd b7       	in	r28, 0x3d	; 61
 ae2:	de b7       	in	r29, 0x3e	; 62
 ae4:	ca 1b       	sub	r28, r26
 ae6:	db 0b       	sbc	r29, r27
 ae8:	0f b6       	in	r0, 0x3f	; 63
 aea:	f8 94       	cli
 aec:	de bf       	out	0x3e, r29	; 62
 aee:	0f be       	out	0x3f, r0	; 63
 af0:	cd bf       	out	0x3d, r28	; 61
 af2:	09 94       	ijmp

00000af4 <__epilogue_restores__>:
 af4:	2a 88       	ldd	r2, Y+18	; 0x12
 af6:	39 88       	ldd	r3, Y+17	; 0x11
 af8:	48 88       	ldd	r4, Y+16	; 0x10
 afa:	5f 84       	ldd	r5, Y+15	; 0x0f
 afc:	6e 84       	ldd	r6, Y+14	; 0x0e
 afe:	7d 84       	ldd	r7, Y+13	; 0x0d
 b00:	8c 84       	ldd	r8, Y+12	; 0x0c
 b02:	9b 84       	ldd	r9, Y+11	; 0x0b
 b04:	aa 84       	ldd	r10, Y+10	; 0x0a
 b06:	b9 84       	ldd	r11, Y+9	; 0x09
 b08:	c8 84       	ldd	r12, Y+8	; 0x08
 b0a:	df 80       	ldd	r13, Y+7	; 0x07
 b0c:	ee 80       	ldd	r14, Y+6	; 0x06
 b0e:	fd 80       	ldd	r15, Y+5	; 0x05
 b10:	0c 81       	ldd	r16, Y+4	; 0x04
 b12:	1b 81       	ldd	r17, Y+3	; 0x03
 b14:	aa 81       	ldd	r26, Y+2	; 0x02
 b16:	b9 81       	ldd	r27, Y+1	; 0x01
 b18:	ce 0f       	add	r28, r30
 b1a:	d1 1d       	adc	r29, r1
 b1c:	0f b6       	in	r0, 0x3f	; 63
 b1e:	f8 94       	cli
 b20:	de bf       	out	0x3e, r29	; 62
 b22:	0f be       	out	0x3f, r0	; 63
 b24:	cd bf       	out	0x3d, r28	; 61
 b26:	ed 01       	movw	r28, r26
 b28:	08 95       	ret

00000b2a <_exit>:
 b2a:	f8 94       	cli

00000b2c <__stop_program>:
 b2c:	ff cf       	rjmp	.-2      	; 0xb2c <__stop_program>
